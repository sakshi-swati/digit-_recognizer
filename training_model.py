# -*- coding: utf-8 -*-
"""training model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ksl4N2Zmxp9lA8nN-IHZdAPc0RnZ6iYY

*MINOR PROJECT*


AI project based : Digit recognizer based on ANN
"""

#gathering MNIST dataset
import tensorflow as tf
from tensorflow import keras
(x_train, y_train), (x_test, y_test)=tf.keras.datasets.mnist.load_data(path="mnist.npz")

#There are 60000 training sample and 10000 testing sample and with the pixel of 28*28
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

label="0 1 2 3 4 5 6 7 8 9"
label=label.split()
label

import random
import matplotlib.pyplot as plt
i=random.randint(1,60000)
plt.imshow(x_train[i],cmap='gray')
op=y_train[i]
print(label[op])

#normalization
x_train=x_train/255
x_test=x_test/255

#Neuro Network Architecture
#classification problem:
#Hidden Layer activation function:Relu
#Output LAyer activation function:softmax
#loss function: sparse categorical entropy

from keras.layers import Dense
from keras.layers import Flatten
model=keras.Sequential()
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(392,activation='relu'))
model.add(Dense(10,activation='softmax'))

#compiling the model
from keras.utils import to_categorical
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

# Fit the model
from keras.callbacks import EarlyStopping
early_stop=EarlyStopping(mode='min',verbose=1,patience=5)
history=model.fit(x_train,y_train,epochs=12,validation_data=(x_train,y_train),callbacks=[early_stop])

import pandas as pd
loss=pd.DataFrame(model.history.history)
loss.plot()

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

y_test[:10]

import numpy as np

y_predict=model.predict(x_test)
y_predict=np.argmax(y_predict,axis=1)
y_predict[:10]

from sklearn.metrics import accuracy_score,confusion_matrix
confusion_matrix(y_predict,y_test)

accuracy_score(y_predict,y_test)

#saving the model
model.save("digit.hdf5")